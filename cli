#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cli_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli - Paperpile Notion Client\n"
    echo 
  else
    printf "cli - Paperpile Notion Client\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli [command]\n"
  printf "  cli [command] --help | -h\n"
  printf "  cli --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  update      Run the CSV export and the DB update end-to-end."
  echo "  notion      Notion interface"
  echo "  paperpile   Paperpile interface"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
cli_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli update - Run the CSV export and the DB update end-to-end.\n"
    echo 
  else
    printf "cli update - Run the CSV export and the DB update end-to-end.\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli update DIR_ID DB_ID [options]\n"
  printf "  cli update --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --config, -c"
    printf "    Path to the YAML configuration used to parse categories and venues (default:\n    config.yaml).\n"
    printf "    Default: config.yaml\n"
    echo
    
    # :flag.usage
    echo "  --input_dir, -d"
    printf "    Path to the directory containing the downloaded file (default: ~/Downloads)\n"
    printf "    Default: ${HOME}/Downloads\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  DIR_ID"
    printf "    ID of the Paperpile folder that needs to be downloaded.\n"
    echo
    
    # :argument.usage
    echo "  DB_ID"
    printf "    ID of the Notion database that needs to be updated\n"
    echo
    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  NOTION_API_KEY (required)"
    printf "    The API key for the Notion Integration added to the selected database\n"
    echo
    
    # :environment_variable.usage
    echo "  GOOGLE_MAIL (required)"
    printf "    Your Gmail address associated to the Paperpile profile.\n"
    echo
    
    # :environment_variable.usage
    echo "  GOOGLE_PWD (required)"
    printf "    Password of the Google Account associated to the Paperpile profile.\n"
    echo

  fi
}

# :command.usage
cli_notion_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli notion - Notion interface\n"
    echo 
  else
    printf "cli notion - Notion interface\n"
    echo 
  fi

  printf "Shortcut: nn\n"
  echo

  printf "Usage:\n"
  printf "  cli notion [command]\n"
  printf "  cli notion [command] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  update_db   Update a Notion DB using a CSV downloaded from Paperpile."
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_notion_update_db_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli notion update_db - Update a Notion DB using a CSV downloaded from Paperpile.\n"
    echo 
  else
    printf "cli notion update_db - Update a Notion DB using a CSV downloaded from Paperpile.\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli notion update_db DB_ID INPUT [options]\n"
  printf "  cli notion update_db --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --config, -c"
    printf "    Path to the YAML configuration used to parse categories and venues (default:\n    config.yaml).\n"
    printf "    Default: config.yaml\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  DB_ID"
    printf "    ID of the Notion database that needs to be updated\n"
    echo
    
    # :argument.usage
    echo "  INPUT"
    printf "    Path to the CSV file extracted from Paperpile\n"
    echo
    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  NOTION_API_KEY (required)"
    printf "    The API key for the Notion Integration added to the selected database\n"
    echo
    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cli notion update_db 321589dbce9b123488aa1b439c621ba7 data.csv\n"
    printf "  cli notion update_db 321589dbce9b123488aa1b439c621ba7 data.csv -c config.yaml\n"
    echo

  fi
}

# :command.usage
cli_paperpile_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli paperpile - Paperpile interface\n"
    echo 
  else
    printf "cli paperpile - Paperpile interface\n"
    echo 
  fi

  printf "Shortcut: pp\n"
  echo

  printf "Usage:\n"
  printf "  cli paperpile [command]\n"
  printf "  cli paperpile [command] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  download_dir   Download a paper folder from Paperpile in CSV format."
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_paperpile_download_dir_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli paperpile download_dir - Download a paper folder from Paperpile in CSV format.\n"
    echo 
  else
    printf "cli paperpile download_dir - Download a paper folder from Paperpile in CSV format.\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli paperpile download_dir DIR_ID\n"
  printf "  cli paperpile download_dir --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  DIR_ID"
    printf "    ID of the Paperpile folder that needs to be downloaded.\n"
    echo
    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  GOOGLE_MAIL (required)"
    printf "    Your Gmail address associated to the Paperpile profile.\n"
    echo
    
    # :environment_variable.usage
    echo "  GOOGLE_PWD (required)"
    printf "    Password of the Google Account associated to the Paperpile profile.\n"
    echo
    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cli paperpile download_dir pp-folder-2cb1833f-582f-0000-ad59-567be5718692\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
cli_update_command() {
  # :src/update_command.sh
  dir_id="${args[dir_id]}"
  db_id="${args[db_id]}"
  config="${args[--config]}"
  input_dir="${args[--input_dir]}"
  
  echo "Exporting CSV from Paperpile..."
  
  python download_paperpile_dir.py --username $GOOGLE_MAIL --password $GOOGLE_PWD --folder_id $dir_id
  
  input_file=$(find "${input_dir}" -name '*.csv' -print0 | xargs -r -0 ls -1 -t | head -1)
  
  echo "Updating Notion Database..."
  
  python update_notion_db.py --input "${input_file}" --config $config --database $db_id --token $NOTION_API_KEY
  
  rm "${input_file}"
}

# :command.function
cli_notion_update_db_command() {
  # :src/notion_update_db_command.sh
  db_id="${args[db_id]}"
  input_file="${args[input]}"
  config="${args[--config]}"
  
  echo "Updating Notion Database..."
  
  python update_notion_db.py --input "${input_file}" --config $config --database $db_id --token $NOTION_API_KEY
}

# :command.function
cli_paperpile_download_dir_command() {
  # :src/paperpile_download_dir_command.sh
  dir_id="${args[dir_id]}"
  
  echo "Exporting CSV from Paperpile..."
  
  python download_paperpile_dir.py --username $GOOGLE_MAIL --password $GOOGLE_PWD --folder_id $dir_id
  
  echo "Done!"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  update )
    action="update"
    shift
    cli_update_parse_requirements "$@"
    shift $#
    ;;    
  
  notion | nn )
    action="notion"
    shift
    cli_notion_parse_requirements "$@"
    shift $#
    ;;    
  
  paperpile | pp )
    action="paperpile"
    shift
    cli_paperpile_parse_requirements "$@"
    shift $#
    ;;    
  
  # :command.command_fallback
  * )
    cli_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
cli_update_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_update_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  if [[ -z "$NOTION_API_KEY" ]]; then
    printf "missing required environment variable: NOTION_API_KEY\n"
    exit 1
  fi
  if [[ -z "$GOOGLE_MAIL" ]]; then
    printf "missing required environment variable: GOOGLE_MAIL\n"
    exit 1
  fi
  if [[ -z "$GOOGLE_PWD" ]]; then
    printf "missing required environment variable: GOOGLE_PWD\n"
    exit 1
  fi
  # :command.dependencies_filter
  # :command.command_filter
  action="update"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[dir_id]=$1
    shift
  else
    printf "missing required argument: DIR_ID\nusage: cli update DIR_ID DB_ID [options]\n"
    exit 1
  fi
  
  if [[ $1 && $1 != -* ]]; then
    args[db_id]=$1
    shift
  else
    printf "missing required argument: DB_ID\nusage: cli update DIR_ID DB_ID [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --config | -c )
      args[--config]=1
      shift
      ;;
  
    # :flag.case
    --input_dir | -d )
      args[--input_dir]=1
      shift
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[dir_id]} ]]; then
        args[dir_id]=$1
        shift
      elif [[ ! ${args[db_id]} ]]; then
        args[db_id]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  [[ -n ${args[--config]} ]] || args[--config]="config.yaml"
  [[ -n ${args[--input_dir]} ]] || args[--input_dir]="${HOME}/Downloads"
  # :command.whitelist_filter
}

# :command.parse_requirements
cli_notion_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_notion_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  update_db )
    action="update_db"
    shift
    cli_notion_update_db_parse_requirements "$@"
    shift $#
    ;;    
  
  # :command.command_fallback
  * )
    cli_notion_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
cli_notion_update_db_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_notion_update_db_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  if [[ -z "$NOTION_API_KEY" ]]; then
    printf "missing required environment variable: NOTION_API_KEY\n"
    exit 1
  fi
  # :command.dependencies_filter
  # :command.command_filter
  action="notion update_db"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[db_id]=$1
    shift
  else
    printf "missing required argument: DB_ID\nusage: cli notion update_db DB_ID INPUT [options]\n"
    exit 1
  fi
  
  if [[ $1 && $1 != -* ]]; then
    args[input]=$1
    shift
  else
    printf "missing required argument: INPUT\nusage: cli notion update_db DB_ID INPUT [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --config | -c )
      args[--config]=1
      shift
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[db_id]} ]]; then
        args[db_id]=$1
        shift
      elif [[ ! ${args[input]} ]]; then
        args[input]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  [[ -n ${args[--config]} ]] || args[--config]="config.yaml"
  # :command.whitelist_filter
}

# :command.parse_requirements
cli_paperpile_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_paperpile_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  download_dir )
    action="download_dir"
    shift
    cli_paperpile_download_dir_parse_requirements "$@"
    shift $#
    ;;    
  
  # :command.command_fallback
  * )
    cli_paperpile_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
cli_paperpile_download_dir_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cli_paperpile_download_dir_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  if [[ -z "$GOOGLE_MAIL" ]]; then
    printf "missing required environment variable: GOOGLE_MAIL\n"
    exit 1
  fi
  if [[ -z "$GOOGLE_PWD" ]]; then
    printf "missing required environment variable: GOOGLE_PWD\n"
    exit 1
  fi
  # :command.dependencies_filter
  # :command.command_filter
  action="paperpile download_dir"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[dir_id]=$1
    shift
  else
    printf "missing required argument: DIR_ID\nusage: cli paperpile download_dir DIR_ID\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[dir_id]} ]]; then
        args[dir_id]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
    printf "bash version 4 or higher is required\n"
    exit 1
  fi

  # :src/initialize.sh
  # Set your enviroment variables here and uncomment them:
  NOTION_API_KEY="secret_4Qw5QceHreOgkBvYIXW2YgzgVzIUgQ4d2geuoWSC6uO"
  GOOGLE_MAIL="gabriele.sarti996@gmail.com"
  GOOGLE_PWD="Jesusofsuburbia96"
}

# :command.run
run() {
  declare -A args
  declare -a other_args
  parse_requirements "$@"

  if [[ $action == "update" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_update_usage
    else
      cli_update_command
    fi
  
  elif [[ $action == "notion" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_notion_usage
    else
      cli_notion_command
    fi
  
  elif [[ $action == "notion update_db" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_notion_update_db_usage
    else
      cli_notion_update_db_command
    fi
  
  elif [[ $action == "paperpile" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_paperpile_usage
    else
      cli_paperpile_command
    fi
  
  elif [[ $action == "paperpile download_dir" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_paperpile_download_dir_usage
    else
      cli_paperpile_download_dir_command
    fi
  
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
